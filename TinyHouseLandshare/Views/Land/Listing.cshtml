@inject SignInManager<UserEntity> signInManager;
@inject UserManager<UserEntity> userManager;
@model LandListingViewModel
@{
    ViewData["Title"] = "Land Listing";
    var userId = (userManager.GetUserId(User) is not null)? new Guid(@userManager.GetUserId(User)): Guid.Empty;
}


<div class="mx-auto max-w-3xl bg-white p-6 drop-shadow-md">

        @if (Model.ImageSrc is not null)
        {
            <img src="@Model.ImageSrc" class="bg-green-50 w-full md:w-4/5 mx-auto mb-4 rounded-sm border border-gray-200 " title="land main image" />

        }
        else
        {
            <img src="~/img/placeholder-image.png" class="bg-green-50 w-full md:w-4/5 mx-auto mb-4 rounded-sm border border-gray-200 " title="land main image" />
        }
        <p class="font-light">Listed: @Model.CreatedTime.Date.ToString("MMM dd yyyy") | Updated: @Model.ModifiedTime.Date.ToString("MMM dd yyyy")</p>
        <h1 class="text-xl font-semibold">@Model.Title.FirstCharToUpper()</h1>
        <p>$@Model.Price.ToString("N0")</p>
        <p>@Model.Location, @Model.State, @Model.Country.FirstCharToUpper()</p>
        <p class="">Available: @Model.AvailableDate.Date.ToString("MMM dd yyyy")</p>
        <h1 class="text-xl mt-4 text-green-700 mb-2">Details</h1>
        <p class="mb-4">@Model.Details</p>

        <p>Land Type: @Model.LandType.FirstCharToUpper()</p>
        <p>Site Foundation: @Model.SiteFoundation.FirstCharToUpper()</p>
        <p>Driveway Foundation: @Model.DrivewayFoundation.FirstCharToUpper()</p>
        <h1 class="text-xl mt-4 text-green-700 mb-2">Features</h1>

        <div class="flex flex-row flex-wrap gap-x-4 gap-y-1">


        @await Component.InvokeAsync("Features", new {waterConnection = Model.WaterConnection,
                                                      electricalConnection = Model.ElectricalConnection,
                                                      wifiConnection = Model.WifiConnection,
                                                      parking = Model.Parking,
                                                      petFriendly = Model.PetFriendly,
                                                      childFriendly = Model.ChildFriendly,
                                                      isPrivate = Model.Private,
                                                      NoSmoking = Model.NoSmoking})

       
        @*@if (Model.WaterConnection)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Water
            </div>
        }
        @if (Model.ElectricalConnection)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Electrical
            </div>
        }
        @if (Model.WifiConnection)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Internet/Wifi
            </div>
        }
        @if (Model.PetFriendly)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Pets Allowed
            </div>
        }
        @if (Model.ChildFriendly)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Child Friendly
            </div>
        }
        
        @if (Model.Parking)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Parking
            </div>
        }
        @if (Model.NoSmoking)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-xmark text-red-500"></i>
                No Smoking
            </div>
        }

        @if(Model.Private)
        {
            <div>
                <i class="fa-sharp fa-solid fa-circle-check text-green-500"></i>
                Private
            </div>
        }*@
     </div>

    <div class="flex flex-col mx-4 mt-10 mb-4 p-4  border border-green-700 shadow-md rounded-sm  ">

        <h1 class="mb-2 text-center text-lg font-semibold">Message owner about this listing</h1>
        @if (signInManager.IsSignedIn(User))
        {
            @await Component.InvokeAsync("InitialMessage", new {UserListingId = Model.UserListingId, SenderId = userId, ReceiverId = Model.ListerId})
                
        }
        else
        {
            <p class="text-center">Login to message</p>
            <div class="my-2 flex flex-row flex-wrap gap-x-2 justify-center ">
                <a asp-area="" asp-controller="Account" asp-action="Login" class="px-4 py-2 w-32 text-white  rounded-sm bg-green-700 hover:bg-green-800 drop-shadow-sm hover:drop-shadow-md hover:duration-300">Login</a>
                <a asp-area="" asp-controller="Account" asp-action="Register" class="px-4 py-2 w-32 text-white rounded-sm bg-green-700 hover:bg-green-800 drop-shadow-sm hover:drop-shadow-md hover:duration-300">Register</a>
            </div>
        }
    </div>
</div>

        
